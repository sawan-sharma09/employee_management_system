// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: grpc_services/emp.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EmpService_Bidi_Emp_FullMethodName = "/grpc_services.EmpService/Bidi_Emp"
)

// EmpServiceClient is the client API for EmpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmpServiceClient interface {
	Bidi_Emp(ctx context.Context, opts ...grpc.CallOption) (EmpService_Bidi_EmpClient, error)
}

type empServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmpServiceClient(cc grpc.ClientConnInterface) EmpServiceClient {
	return &empServiceClient{cc}
}

func (c *empServiceClient) Bidi_Emp(ctx context.Context, opts ...grpc.CallOption) (EmpService_Bidi_EmpClient, error) {
	stream, err := c.cc.NewStream(ctx, &EmpService_ServiceDesc.Streams[0], EmpService_Bidi_Emp_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &empServiceBidi_EmpClient{stream}
	return x, nil
}

type EmpService_Bidi_EmpClient interface {
	Send(*EmpRequest) error
	Recv() (*EmpResponse, error)
	grpc.ClientStream
}

type empServiceBidi_EmpClient struct {
	grpc.ClientStream
}

func (x *empServiceBidi_EmpClient) Send(m *EmpRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *empServiceBidi_EmpClient) Recv() (*EmpResponse, error) {
	m := new(EmpResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EmpServiceServer is the server API for EmpService service.
// All implementations must embed UnimplementedEmpServiceServer
// for forward compatibility
type EmpServiceServer interface {
	Bidi_Emp(EmpService_Bidi_EmpServer) error
	MustEmbedUnimplementedEmpServiceServer()
}

// UnimplementedEmpServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEmpServiceServer struct {
}

func (UnimplementedEmpServiceServer) Bidi_Emp(EmpService_Bidi_EmpServer) error {
	return status.Errorf(codes.Unimplemented, "method Bidi_Emp not implemented")
}
func (UnimplementedEmpServiceServer) mustEmbedUnimplementedEmpServiceServer() {}

// UnsafeEmpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmpServiceServer will
// result in compilation errors.
type UnsafeEmpServiceServer interface {
	mustEmbedUnimplementedEmpServiceServer()
}

func RegisterEmpServiceServer(s grpc.ServiceRegistrar, srv EmpServiceServer) {
	s.RegisterService(&EmpService_ServiceDesc, srv)
}

func _EmpService_Bidi_Emp_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EmpServiceServer).Bidi_Emp(&empServiceBidi_EmpServer{stream})
}

type EmpService_Bidi_EmpServer interface {
	Send(*EmpResponse) error
	Recv() (*EmpRequest, error)
	grpc.ServerStream
}

type empServiceBidi_EmpServer struct {
	grpc.ServerStream
}

func (x *empServiceBidi_EmpServer) Send(m *EmpResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *empServiceBidi_EmpServer) Recv() (*EmpRequest, error) {
	m := new(EmpRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EmpService_ServiceDesc is the grpc.ServiceDesc for EmpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_services.EmpService",
	HandlerType: (*EmpServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Bidi_Emp",
			Handler:       _EmpService_Bidi_Emp_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc_services/emp.proto",
}
